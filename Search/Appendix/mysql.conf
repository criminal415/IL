input {
        jdbc {
                jdbc_driver_library => "/home/jeongminoh0415/mysql-connector-java-8.0.27/mysql-connector-java-8.0.27.jar"
                jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
                jdbc_connection_string => "<mysql_hostname:port_num/db_name>"
                jdbc_user => "<mysql_user_name>"
                jdbc_password => "<mysql_password>"
                jdbc_paging_enabled => true
                tracking_column => "updatedAt"
                tracking_column_type => "numeric"
                statement => "select t1.board_id, t1.board_title, t1.board_image, t1.board_desc, t1.board_content, t1.view_count, t1.like_count, t2.comment_count, t3.liked_users, t1.updatedAt from
                                (SELECT b.board_id,b.board_title,b.board_content,b.board_image, b.board_desc, b.view_count,count(l.board_id) as like_count, b.updatedAt

                                FROM boards AS b
                                left OUTER JOIN likes AS l
                                ON b.board_id = l.board_id
                                WHERE b.board_delete_code = 0
                                GROUP BY b.board_id
                                ORDER BY b.createdAt DESC) as t1
                                join

                                (select b.board_id, count(c.board_id) as comment_count, u.user_id


                                FROM boards AS b
                                LEFT OUTER JOIN comments AS c
                                ON (b.board_id = c.board_id AND c.comment_delete_code=0)
                                left outer join likes as u
                                on b.board_id = u.board_id
                                group by b.board_id
                                ORDER BY b.createdAt DESC) as t2
                                on t1.board_id = t2.board_id
                                left outer join

                                (select b.board_id, u.user_id, JSON_ARRAYAGG( u.user_id) as liked_users
                                FROM boards AS b

                                left outer join likes as u
                                on b.board_id = u.board_id
                                group by b.board_id
                                ORDER BY b.createdAt DESC) as t3
                                on t1.board_id = t3.board_id"
                schedule => "*/8 * * * * *"
                last_run_metadata_path => "/home/jeongminoh0415/ls-711/.logstash_jdbc_last_run"
                tags => [boards]
                codec => json
        }
        jdbc {
                jdbc_driver_library => "/home/jeongminoh0415/mysql-connector-java-8.0.27/mysql-connector-java-8.0.27.jar"
                jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
                jdbc_connection_string => "<mysql_hostname:port_num/db_name>"
                jdbc_user => "<mysql_user_name>"
                jdbc_password => "<mysql_password>"
                jdbc_paging_enabled => true
                tracking_column => "updatedAt"
                tracking_column_type => "numeric"
                statement => "select t1.game_id,t1.game_view_count,t1.game_delete_code, t1.game_title,t1.like_count, t2.nickname, t2.participation_count, t3.liked_users, t1.updatedAt from
                                (SELECT g.game_id,g.game_view_count,g.game_delete_code,g.game_title,count(l.game_id) as like_count, g.updatedAt

                                    FROM games AS g
                                    left OUTER JOIN game_likes AS l
                                    ON g.game_id = l.game_id

                                    GROUP BY g.game_id
                                    ORDER BY g.createdAt DESC) as t1
                                    join

                                (select g.game_id,a.nickname, count(c.game_id) as participation_count

                                FROM games AS g
                                Left OUTER JOIN users AS a
                                ON (g.user_id = a.user_id AND a.user_delete_code=0)
                                left outer join game_counts as c
                                on g.game_id = c.game_id
                                group by g.game_id
                                ORDER BY g.createdAt DESC) as t2
                                on t1.game_id = t2.game_id
                                left outer join

                                (select g.game_id, l.user_id, JSON_ARRAYAGG( l.user_id) as liked_users
                                    FROM games AS g
                                    left outer join game_likes as l
                                    on g.game_id = l.game_id
                                    group by g.game_id
                                    ORDER BY g.createdAt DESC) as t3
                                    on t1.game_id = t3.game_id"
                schedule => "*/8 * * * * *"
                last_run_metadata_path => "/home/jeongminoh0415/ls-711/.logstash_jdbc_last_run"
                tags => [games]
                codec => json
        }
}
filter {
  if "boards" in [tags] {
  mutate {
    copy => {"board_id" => "[@metadata][board_id]"}
    remove_field => ["@version","@timestamp","updatedAt"]
    coerce => { "liked_users" => "0" }
 }
  ruby {
    code => "
      require 'json'

      liked_users = JSON.parse(event.get('liked_users'))

      event.set('liked_users', liked_users.select {|user| user != nil })
   "
  }
 } else {
  mutate {
    copy => {"game_id" => "[@metadata][game_id]"}
    remove_field => ["@version","@timestamp","updatedAt"]
    coerce => { "liked_users" => "0" }
 }
  ruby {
    code => "
      require 'json'

      liked_users = JSON.parse(event.get('liked_users'))

      event.set('liked_users', liked_users.select {|user| user != nil })
   "
  }
 }

}

output {
 if "boards" in [tags] {
  elasticsearch {
    hosts => ["<host_ip/port_num>"]
    user => "<user_name>"
    password => "<password>"
    index => "fungapsearch_b"
    document_id => "%{[@metadata][board_id]}"
 }
 }else {
  elasticsearch {
    hosts => ["<host_ip/port_num>"]
    user => "<user_name>"
    password => "<password>"
    index => "fungapsearch_g"
    document_id => "%{[@metadata][game_id]}"
 }
 }
}